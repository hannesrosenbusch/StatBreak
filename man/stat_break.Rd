% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat_break.R
\name{stat_break}
\alias{stat_break}
\title{Find smallest subset to exclude from sample for effect/pattern to disappear}
\usage{
stat_break(
  data = NULL,
  goal_value = NULL,
  statistic_computation = NULL,
  max_exclusions = NULL,
  pop = 1000,
  max_generations = 2000,
  exclusion_cost = 0.01,
  prop_included_cases = 0.95,
  chance_of_mutation = 0.02,
  stop_search = 200,
  random_seed = 42
)
}
\arguments{
\item{data}{A data.frame containing the observations as rows.}

\item{goal_value}{This conservative value (e.g., small effect size) is targeted.}

\item{statistic_computation}{A formula which has 'data' as input and returns the statistic of interest.}

\item{max_exclusions}{maximum number of cases to be excluded}

\item{pop}{Number of 'individuals' in each generation of the genetic algorithm.}

\item{max_generations}{Maximum number of generations that the algorithm generates.}

\item{exclusion_cost}{Used to calibrate fitness function.}

\item{prop_included_cases}{Initial proportion of included cases (e.g. .90).}

\item{chance_of_mutation}{Chance that a gene mutates, higher is slower but more accurate (e.g. .02).}

\item{stop_search}{After how many generations without change is the 'converged' result returned.}

\item{random_seed}{Seed for replicability.}
}
\value{
Vector of row indeces of rows to be excluded
}
\description{
The function iteratively learns which observations should at least be excluded from
the data to reach a conservative 'goal value' for the statistic of interest.
It does so by relying on a genetic algorithm, which efficiently explores the (usually vast)
space of possible subsets. The result can uncover impactful subsamples and fuel discussions of robustness.
Necessary arguments include the dataframe,
a function to compute the statistic of interest ('statistic_computation' see examples),
and the goal value of interest.
}
\examples{
coefficient_computation <- function(data){
statistic <- cor(data$Sepal.Length, data$Petal.Width)
return(statistic)}

filter <- stat_break(data = iris, statistic_computation = coefficient_computation, goal_value = 0.2, max_generations = 500)
print(filter)

}
